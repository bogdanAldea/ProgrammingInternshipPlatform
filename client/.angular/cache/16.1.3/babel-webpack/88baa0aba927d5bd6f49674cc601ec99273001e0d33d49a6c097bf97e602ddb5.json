{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../core/services/authentication.service\";\nimport * as i3 from \"@angular/router\";\nexport class SigninComponent {\n  constructor(formBuilder, authService, router) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.router = router;\n    this.signInForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n    this.getSignInCredentialsFromForm = () => {\n      const signinRequest = {\n        email: this.signInForm.value.email,\n        password: this.signInForm.value.password\n      };\n      return signinRequest;\n    };\n    this.submitSignInCredentials = () => {\n      const request = this.getSignInCredentialsFromForm();\n      console.log(request);\n      this.authService.submitSignInRequest(request).subscribe({\n        next: response => {\n          // Handle successful response \n          // Token should be stored here\n          console.log('Registration successful:', response);\n          this.router.navigate(['/user/internships']);\n        },\n        error: error => {\n          // Handle error\n          // Api will return an error object\n          console.error('Registration failed:', error);\n        }\n      });\n    };\n  }\n}\nSigninComponent.ɵfac = function SigninComponent_Factory(t) {\n  return new (t || SigninComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.Router));\n};\nSigninComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SigninComponent,\n  selectors: [[\"app-signin\"]],\n  decls: 2,\n  vars: 0,\n  template: function SigninComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"signin works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","SigninComponent","constructor","formBuilder","authService","router","signInForm","group","email","required","password","getSignInCredentialsFromForm","signinRequest","value","submitSignInCredentials","request","console","log","submitSignInRequest","subscribe","next","response","navigate","error","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthenticationService","i3","Router","selectors","decls","vars","template","SigninComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\bogdan.aldea\\Desktop\\Client\\src\\app\\features\\authentication\\signin\\signin.component.ts","C:\\Users\\bogdan.aldea\\Desktop\\Client\\src\\app\\features\\authentication\\signin\\signin.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SigninRequest } from '../core/interfaces/signin-request';\nimport { AuthenticationService } from '../core/services/authentication.service';\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\nexport class SigninComponent {\n  public constructor(private formBuilder: FormBuilder, \n    private authService: AuthenticationService,\n    private router: Router) {}\n\n  public signInForm: FormGroup = this.formBuilder.group({\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required]],\n  })\n\n  public getSignInCredentialsFromForm = () : SigninRequest => {\n    const signinRequest: SigninRequest = {\n      email: this.signInForm.value.email!,\n      password: this.signInForm.value.password!\n    };\n\n    return signinRequest;\n  }\n\n  public submitSignInCredentials = () => {\n    const request: SigninRequest = this.getSignInCredentialsFromForm();\n    console.log(request)\n    this.authService.submitSignInRequest(request)\n    .subscribe({\n      next: response => {\n        // Handle successful response \n        // Token should be stored here\n        console.log('Registration successful:', response);\n        this.router.navigate(['/user/internships']);\n      },\n      error: error => {\n        // Handle error\n        // Api will return an error object\n        console.error('Registration failed:', error);\n      }\n    });\n  }\n}\n","<p>signin works!</p>\n"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AAUnE,OAAM,MAAOC,eAAe;EAC1BC,YAA2BC,WAAwB,EACzCC,WAAkC,EAClCC,MAAc;IAFG,KAAAF,WAAW,GAAXA,WAAW;IAC5B,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IAET,KAAAC,UAAU,GAAc,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC;MACpDC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACQ,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,CAAC;KACrC,CAAC;IAEK,KAAAE,4BAA4B,GAAG,MAAqB;MACzD,MAAMC,aAAa,GAAkB;QACnCJ,KAAK,EAAE,IAAI,CAACF,UAAU,CAACO,KAAK,CAACL,KAAM;QACnCE,QAAQ,EAAE,IAAI,CAACJ,UAAU,CAACO,KAAK,CAACH;OACjC;MAED,OAAOE,aAAa;IACtB,CAAC;IAEM,KAAAE,uBAAuB,GAAG,MAAK;MACpC,MAAMC,OAAO,GAAkB,IAAI,CAACJ,4BAA4B,EAAE;MAClEK,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;MACpB,IAAI,CAACX,WAAW,CAACc,mBAAmB,CAACH,OAAO,CAAC,CAC5CI,SAAS,CAAC;QACTC,IAAI,EAAEC,QAAQ,IAAG;UACf;UACA;UACAL,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEI,QAAQ,CAAC;UACjD,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC;QAC7C,CAAC;QACDC,KAAK,EAAEA,KAAK,IAAG;UACb;UACA;UACAP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C;OACD,CAAC;IACJ,CAAC;EAjC0B;;AAHhBtB,eAAe,C;mBAAfA,eAAe,EAAAuB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,qBAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,MAAA;AAAA;AAAf9B,eAAe,C;QAAfA,eAAe;EAAA+B,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCX5Bb,EAAA,CAAAe,cAAA,QAAG;MAAAf,EAAA,CAAAgB,MAAA,oBAAa;MAAAhB,EAAA,CAAAiB,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}